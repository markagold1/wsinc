function p = plotres(res,varargin)
% Usage: p = plotres(res,varargin)
%
% Plot filter response results generated by COMPARE_FILTERS.M
%
%  p = plotres(res,figno,xscale,nospec)
%
%  res............cell array of results to plot
%  figno..........optional figure number
%  xscale.........optional char array, abscissa scale, 'linear' or 'log'
%                 default 'linear'
%  nospec.........optional char array, 'nospec', if provided
%                 omit filter specification boundaries from plot
%

    figno = [];
    xscale = 'linear';
    showspec = true;
    for kk = 1:numel(varargin)
        thisarg = varargin{kk};
        if isnumeric(thisarg)
            figno = thisarg;
        elseif ischar(thisarg) && ...
          (strcmpi(thisarg,'linear') || strcmpi(thisarg,'log'))
            xscale = lower(thisarg);
        elseif ischar(thisarg) && strcmpi(thisarg,'nospec')
           showspec = false;
        end
    end

    if ~isempty(figno)
        figure(figno);
    else
        figure();
    end
    f = res{1}.f;
    Hdb = nan(numel(f),numel(res));
    leg = {};
    for kk = 1:numel(res)
       Hdb(:,kk) = res{kk}.Hdb(:);
       leg{end+1} = res{kk}.window;
    end
    p = plot(f,Hdb,'LineWidth',1.5);
    if showspec
        if strcmpi(res{1}.type,'lowpass')
            lpf_spec(res);
            hleg = legend(leg);
            legend('location','NorthEast');
        elseif strcmpi(res{1}.type,'highpass')
            hpf_spec(res);
            hleg = legend(leg);
            legend('location','NorthWest');
        elseif strcmpi(res{1}.type,'bandpass')
            bpf_spec(res);
            hleg = legend(leg);
            legend('location','South');
        end
    end
    if ~isoctave()
        xtickformat('usd');
        xtickformat('%.0f');
    end
    grid on
    xlabel('Frequency (Hz)');
    ylabel('Gain (dB)');
    title('Magnitude Responses');
    set(gca,'FontSize',14);
    set(hleg,'FontSize',10);
    if strcmpi(xscale,'log')
        set(gca,'XScale','log');
    end

end % function

function lpf_spec(res)
    ax = axis;
    hold on;
    u1 = [ax(1)-10 ax(1)-10 res{1}.fc res{1}.fc];
    v1 = [ax(3)-10 -6.021 -6.021 ax(3)-10];
    pf1 = fill(u1,v1,'k','FaceAlpha',0.1,'LineWidth',2);
    u2 = [res{1}.fstop res{1}.fstop ax(2)+10 ax(2)+10];
    v2 = [-res{1}.Adb ax(4)+10 ax(4)+10 -res{1}.Adb];
    pf2 = fill(u2,v2,'k','FaceAlpha',0.1,'LineWidth',2);
    axis(ax);
    hold off;
end % function

function hpf_spec(res)
    ax = axis;
    hold on;
    u1 = [ax(1)-10 ax(1)-10 res{1}.fstop res{1}.fstop];
    v1 = [-res{1}.Adb ax(4)+10 ax(4)+10 -res{1}.Adb];
    pf1 = fill(u1,v1,'k','FaceAlpha',0.1,'LineWidth',2);
    u2 = [res{1}.fc res{1}.fc  ax(2)+10 ax(2)+10];
    v2 = [ax(3)-10 -6.021 -6.021 ax(3)-10];
    pf2 = fill(u2,v2,'k','FaceAlpha',0.1,'LineWidth',2);
    axis(ax);
    hold off;
end % function

function bpf_spec(res)
    ax = axis;
    hold on;
    u1 = [ax(1)-10 ax(1)-10 res{1}.fstop(1) res{1}.fstop(1)];
    v1 = [-res{1}.Adb ax(4)+10 ax(4)+10 -res{1}.Adb];
    pf1 = fill(u1,v1,'k','FaceAlpha',0.1,'LineWidth',2);
    u2 = [res{1}.fstop(2) res{1}.fstop(2) ax(2)+10 ax(2)+10];
    v2 = [-res{1}.Adb ax(4)+10 ax(4)+10 -res{1}.Adb];
    pf2 = fill(u2,v2,'k','FaceAlpha',0.1,'LineWidth',2);
    u3 = [res{1}.fc(1) res{1}.fc(1) res{1}.fc(2) res{1}.fc(2)];
    v3 = [ax(3)-10 -6.021 -6.021 ax(3)-10];
    pf3 = fill(u3,v3,'k','FaceAlpha',0.1,'LineWidth',2);
    axis(ax);
    hold off;
end % function

function y = isoctave()
    y = exist('OCTAVE_VERSION', 'builtin') ~= 0;
end % function
